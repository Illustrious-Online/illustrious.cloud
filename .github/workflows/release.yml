name: "Illustrious Cloud Release"
permissions:
  contents: read
  pull-requests: write
on:
  pull_request:
    types:
      - closed
    branches:
      - main
jobs:
  cloud-release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      SPACE_URL: https://${{ secrets.SPACE_NAME }}.${{ secrets.SPACE_REGION }}.digitaloceanspaces.com
    steps:
      ### Install server dependencies
      - name: Setup Bun
        uses: oven-sh/setup-bun@4bc047ad259df6fc24a6c9b0f9a0cb08cf17fbe5
        with:
          bun-version: latest
      - name: Install doctl
        uses: digitalocean/action-doctl@135ac0aa0eed4437d547c6f12c364d3006b42824
        with:
          token: ${{ secrets.DO_TOKEN }}
      - name: Install spaces-cli
        run: bun install -g spaces-cli
      ### Clone repository & install application dependencies
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Checkout default branch
        run: |
          git fetch origin main
          git checkout main
          git reset --hard origin/main
      - name: Download test dependency files
        run: |
          spaces-cli down $SPACE_URL/cloud/ci.env -o ./.env -k ${{ secrets.SPACE_SECRET }} -i ${{ secrets.SPACE_KEY }}
          spaces-cli down $SPACE_URL/cloud/certificate-pub.crt -o ./cert.crt -k ${{ secrets.SPACE_SECRET }} -i ${{ secrets.SPACE_KEY }}
      - name: Install Dependencies
        run: bun install --frozen-lockfile
      ### Update the Kubernetes deployment
      - name: Update argocd values
        run: |
          export NEW_VERSION=$(bunx semantic-release --dry-run | grep 'The next release version is' | awk '{print $NF}')
          sed -i "s/tag: .*/tag: ${NEW_VERSION}/" k8s/values.yaml
          sed -i "s/version: .*/version: ${NEW_VERSION}/" k8s/Chart.yaml
          sed -i 's/appVersion: .*/appVersion: "'${NEW_VERSION}'"/' k8s/Chart.yaml
      ### Push database migrations
      - name: Add actions IP to trusted source for database
        run: |
          IP=$(curl -s ifconfig.me)
          doctl databases firewalls append ${{ secrets.DB_UUID }} --rule ip_addr:$IP
      - name: Push database migrations
        run: |
          export NODE_TLS_REJECT_UNAUTHORIZED=0
          bunx drizzle-kit migrate
          export NODE_TLS_REJECT_UNAUTHORIZED=1
      - name: Remove actions IP to trusted source for database
        run: |
          IP=$(curl -s ifconfig.me)
          JSON=$(doctl databases firewalls list ${{ secrets.DB_UUID }} --output json)
          ID=$(echo $JSON | jq -r '.[] | select(.value == '\"$IP\"').uuid')
          doctl databases firewalls remove ${{ secrets.DB_UUID }} --uuid $ID
      ### Set up production environment variables
      - name: Download production environment variables
        run: |
          rm -rf .env cert.crt
          spaces-cli down $SPACE_URL/cloud/production.env -o .env -k ${{ secrets.SPACE_SECRET }} -i ${{ secrets.SPACE_KEY }}
          spaces-cli down $SPACE_URL/cloud/certificate-vpc.crt -o ./cert.crt -k ${{ secrets.SPACE_SECRET }} -i ${{ secrets.SPACE_KEY }}
      ### Build new docker image with new version
      - name: Build the application
        run: bun run build
      ### Build new docker image as latest version
      - name: Build and push latest Docker image
        run: |
          echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
          docker build -t ${{ secrets.REGISTRY_URL }}:latest .
          docker push ${{ secrets.REGISTRY_URL }}:latest
      ### Push new versioned Docker image to registry
      - name: Push versioned Docker image to registry
        run: |
          echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
          export NEW_VERSION=$(bunx semantic-release --dry-run | grep 'The next release version is' | awk '{print $NF}')
          sed -i "s/tag: .*/tag: ${NEW_VERSION}/" k8s/values.yaml
          sed -i "s/version: .*/version: ${NEW_VERSION}/" k8s/Chart.yaml
          sed -i 's/appVersion: .*/appVersion: "'${NEW_VERSION}'"/' k8s/Chart.yaml
          docker build -t ${{ secrets.REGISTRY_URL }}:$NEW_VERSION .
          docker push ${{ secrets.REGISTRY_URL }}:$NEW_VERSION
      ### Execute final versioning updates via semantic-release
      - name: Execute semantic-release
        run: |
          export NEW_VERSION=$(bunx semantic-release --dry-run | grep 'The next release version is' | awk '{print $NF}')
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add .
          git commit -m "chore: release $NEW_VERSION [skip ci]"
          bunx semantic-release
